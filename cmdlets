#PowerShell commands
 
#to know the commands that starts with get
Get-Command -Verb Get
 
#to know more about a particular command
Get-Help Get-Process
help Get-Process
 
#to know the aliases
Get-Alias chdir
 
#to set alias for a cmdlet
Set-Alias -Name pr -Value Get-Process
Get-Alias Get-Process
 
#Variables= is a names container to store and manage data
#Always starts with $
#Powershell is loosely typed means you don't need to declare data type
#common data types
$string1 = "hello"
$Integer = 10
$Boolean = $true
$Decimal = 99.99
$DateTime = Get-Date
$Array = @(1,2,3)
 
 
#to check data type
$Integer.GetType()
 
#string interpolation
$name = "Hrushikesh"
Write-Host "Hi, $name!"
 
#Arrays
$fruits = @("apple", "banana", "mango")
#accessig array elements
$fruits[0] #first element
$fruits[-1] #last element
$fruits[1..3] #elements from 1 to 3
$fruits[0,2] #elements at indexes 0 and 2
#adding elements
$fruits[3] = "carrot" #arrays are immutable in size
$fruits += "carrot"
 
#for frequent adding/removing
$array = [System.Collections.ArrayList]@()
$array.add("one")
$array.Remove("two") #no error
$array.Remove("one") #removes one element
 
$arr= @("America", "india", "iceland", "butan", 1, 2, "america")
#filtering, sorting
$response=$arr | Where-Object {$_ -eq 'india'}
#sorting
$sorted= $arr | Sort-Object
#grouping
$groupby= $arr | Group-Object
#count
$arr.Count
#out: 7
 
#comapring arrays
$arr1= @(1,2,3,4)
$arr2= @(1,2, "ramesh", "sita", 99.9, $true)
Compare-Object -ReferenceObject $arr1 -DifferenceObject $arr2
<#output
ramesh      =>
sita        =>
99.900      =>
4           <=
#>
 
#to show items that are present in both the arrays
Compare-Object $arr1 $arr2 -IncludeEqual
<#
InputObject SideIndicator
----------- -------------
          1 ==
          2 ==
          3 ==
     ramesh =>
       sita =>
     99.900 =>
          4 <=
#>
 
#joining arrays
$arr1 -join ","
$arr2 -join "="
<#
PS /Users/BO20374933> $arr1 -join ","
$arr2 -join "="
1,2,3,4
1=2=ramesh=sita=99.9=True
#>
 
#array of objects
$data = @(
    [PSCustomObject]@{
    name = "ramesh"
    age = 57
    }
    [PSCustomObject]@{
    name = "partheev"
    age= 22
    occupation = "student"
    }
)
$data.age
#get age of specific person
($data | Where-Object {$_.name -eq 'partheev'}).age
<#
PS /Users/BO20374933> ($data | Where-Object {$_.name -eq 'partheev'}).age
22
#>
 
#Operators
<#
-eq
-ne
-gt
-lt
-like
-clike case-sensitive
-match
-cmatch
#>
 
#hash tables
$student=@{
    name="Hrushikesh"
    age= 23
    score= 96
}
#accessing
$student.name
$student["name"]
#adding new key-value pair
$student.city = "pune"